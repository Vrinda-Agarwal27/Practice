#BRUTE FORCE O(n^3)
generate all subarrays,calculate the product of each and maintain a max product
class Solution {
    public int maxProduct(int[] nums) {
        
        int max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            int prod=1;
            for(int j=i;j<nums.length;j++)
            {
                prod=1;
                for(int t=i;t<=j;t++)
                    prod*=nums[t];
                max=Math.max(max,prod);
            }
        }
        return max;
    }
}

#BRUTE FORCE O(n^2)
generate all possible subarrays and while doing so calculate the product.
class Solution {
    public int maxProduct(int[] nums) {
        
        int max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            int prod=1;
            for(int j=i;j<nums.length;j++)
            {
                prod*=nums[j];
                max=Math.max(max,prod);
            }
        }
        return max;
    }
}

#OPTIMAL APPROACH O(n)
intuitive approach , observation based
1. even number of negatives -> consider all numbers
2. odd number of negatives -> [3,2,-1,4,-6,3,-2,6]
    make prefixes and suffixes leaving one of the (-)ve number
    prefix=[3,2] suffix=[4,-6,3,-2,6] max=864
    prefix=[3,2,-1,4] suffix=[3,-2,6] max=-12
    prefix=[3,2,-1,4,-6,3] suffix=[6] max=432
    max=864
3. contains zeros -> [-2,3,4,-1,0,-2,3,1,4,0,4,6,-1,4]
    if prefix becomes zero set it to 1, same for suffix
    [-2,3,4,-1] [-2,3,1,4] [4,6,-1,4]
    Prefixes
    -2           -2         4
    -6           -6         24
    -24          -6         -24
    24           -24        -86

    Suffixes
    -1            4          4
    -4            4         -4
    -12           12        -24
    24            -24       -86

class Solution {
    public int maxProduct(int[] nums) {
        int n=nums.length;
        int prefix=1,suffix=1;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
            if(prefix==0)
                prefix=1;
            if(suffix==0)
                suffix=1;
            
            prefix*=nums[i];
            suffix*=nums[n-i-1];
            max=Math.max(max,Math.max(prefix,suffix));
        }
        return max;
    }
}
