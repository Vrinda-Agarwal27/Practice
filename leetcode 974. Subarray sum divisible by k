#BRUTE FORCE1 O(n3)

class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int sum=0;
        int ans=0;
        for(int i=0;i<nums.length;i++)
        {
            sum=nums[i];
            if(sum%k==0)
            {
                System.out.println("i="+i+" "+"sum="+sum);
                ans++;
            } 
            for(int j=i+1;j<nums.length;j++)
            {
                sum+=nums[j];
                if(sum%k==0)
                {
                    System.out.println("i="+i+" "+"sum="+sum);
                    ans++;
                } 
                // sum+=nums[j];  
            }
        }
        return ans;
    }
}

#BRUTE FORCE2 O(n2)

The cumulative sum being calculated at every iteration can be calculated beforehand and stored
class Solution {
    //BRUTE FORCE 2
    public int subarraysDivByK(int[] nums, int k) {
        int sum=0;
        int ans=0;
        int CuSum[]=new int[nums.length];
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
            CuSum[i]=sum;
        }
        sum=0;
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i;j<nums.length;j++)
            {
                sum=(i==0)?CuSum[j]:CuSum[j]-CuSum[i-1];
                if(sum%k==0)
                {
                    System.out.println("i="+i+" "+"sum="+sum);
                    ans++;
                } 
                // sum+=nums[j];  
            }
        }
        return ans;
    }
}

#FINAL SOLUTION(%)

uses %, handle negative remainders
class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,1);//remainder 0
        int sum=0,rem=0,result=0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
            rem=sum%k;
            //7n-4=7n-4+7-7
            //7(n-1)+3
            //7n-4=7m+3
            if(rem<0)//for corner case
                rem+=k;
            if(map.containsKey(rem))
            {
                result+=map.get(rem);
                map.put(rem,map.get(rem)+1);
            }
            else
                map.put(rem,1);
        }
        return result;
    }
}
