https://www.youtube.com/watch?v=OMJgbReLggM
//{ Driver Code Starts
//Initial Template for JAVA

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int n = Integer.parseInt(read.readLine());
            
            String S[] = read.readLine().split(" ");
            
            ArrayList<Integer> arr = new ArrayList<>();
            
            for(int i=0; i<n; i++)
                arr.add(Integer.parseInt(S[i]));

            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> res = ob.uniquePerms(arr,n);
            for(int i=0; i<res.size(); i++)
            {
                for(int j=0; j<n; j++)
                {
                    System.out.print(res.get(i).get(j) + " ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends






//User function Template for Java

class Solution {
    public static void Helper(ArrayList<Integer> arr , int n,int idx,ArrayList<ArrayList<Integer>> ans,HashSet<ArrayList<Integer>> used)
    {
        if(idx==n)
        {
            if(!used.contains(arr))
            {
                ans.add(new ArrayList<>(arr));
                used.add(new ArrayList<>(arr)); 
                return;
            }
        }
        for(int i=idx;i<n;i++){
            int a = arr.get(i);
          int b = arr.get(idx);
          arr.set(i,b);
          arr.set(idx,a);  // Swap to generate a new permutation
                Helper(arr, n,idx + 1, ans,used);     // Recurse for the next index
               arr.set(i,a);
          arr.set(idx,b);
        }
    }
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr , int n) {
        // code here
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
        HashSet<ArrayList<Integer>> used=new HashSet<>();
        if(n==0)
            return ans;
        Collections.sort(arr);
        
        Helper(arr,n,0,ans,used);
        //sort the ans 
        Collections.sort(ans, new Comparator<List<Integer>>() {
            public int compare(List<Integer> a, List<Integer> b) {
                int i = 0;
                while(i<n) {
                    if(a.get(i).compareTo(b.get(i)) != 0)
                        return a.get(i).compareTo(b.get(i));
                    i++;
                }
                return 0;
            }
        });
        return ans;
    }
};
