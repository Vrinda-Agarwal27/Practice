ALLOCATE MINIMUM PAGES(GFG)
//{ Driver Code Starts
// Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int a[] = new int[n];

            for (int i = 0; i < n; i++) {
                a[i] = sc.nextInt();
            }
            int m = sc.nextInt();
            Solution ob = new Solution();
            System.out.println(ob.findPages(n, a, m));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    public static boolean isValid(int arr[],long mid,int m)
    {
        int s=1;long sum=0;
        for(int i=0;i<arr.length;i++)
        {
            sum+=arr[i];
            if(sum>mid)
            {
                s++;
                sum=arr[i];
            }
            if(s>m)
                return false;
        }
        //System.out.println(s);
        return true;
    }
    // Function to find minimum number of pages.
    public static long findPages(int n, int[] arr, int m) {
        // Your code here
        // Arrays.sort(arr);
        if(m>n)
            return -1;
        // else if(m==n)
        //     return (long)arr[n-1];
            
        long sum=0,max=Integer.MIN_VALUE;
        for(int i:arr)
        {
            sum+=i;
            max=Math.max(max,i);
        }
            
        long ans=-1;
        long l=max,h=sum,mid=0;
        
        while(l<=h)
        {
            mid=(l+h)/2;
            if(isValid(arr,mid,m)==true)
            {
                //System.out.println(l+" "+mid+" "+h);
                ans=mid;
                //l=mid+1;
                h=mid-1;
            }
            else
                l=mid+1;
        }
        return ans;
    }
};

AGGRESSIVE COWS(SPHERE ONLINE JUDGE)
import java.util.*;
import java.lang.*;

class Main
{
	public static boolean isValid(int stalls[],int c,int m)
    {
        int init=stalls[0],count=1;
        for(int i=1;i<stalls.length;i++)
        {
            int d=stalls[i]-init;
            if(d>=m)
            {
                count++;
                init=stalls[i];
            }
            if(count==c)
                return true;
        }
        return false;
    }
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while(t>0)
        {
            int N=sc.nextInt();
            int C=sc.nextInt();
            int stalls[]=new int[N];
            int i=0,n=-1,max=Integer.MIN_VALUE,min=Integer.MAX_VALUE;
            while(i<N)
            {
                stalls[i]=sc.nextInt();
                if(stalls[i]>max)
                    max=stalls[i];
                i++;
            }
            Arrays.sort(stalls);
           //System.out.println(max);
            int l=0,h=max,mid=0,ans=-1;
            while(l<=h)
            {
                mid=(l+h)/2;
                if(isValid(stalls,C,mid)==true)
                {
                    ans=mid;
                    l=mid+1;
                }
                else
                    h=mid-1;
            }
            System.out.println(ans);
            t--;
        }
	}
}
